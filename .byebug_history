c
n
course.valid?
course
n
c
CoursesRepository.new.search_by_subject('Analisis')
CoursesRepository.new.all
CoursesRespository.new.all
n
c
course.errors.messages.values.flatten[0]
course.errors.messages.values.flatten
course.errors.messages.values
course.errors.messages.values.flatten[0]
course.errors.messages.values.flatten[]0
course.errors.messages.values.flatten.flatten
course.errors.messages.values.flatten
course.errors.messages.values
course.errors.messages
course.errors
course.errors[:quota]
course.errors.keys
course
course.errors.has_key?(:)
course.errors.has_key?(:teacher)
course.valid?
course.errors.has_key?(:quota)
course.errors.has_key?('quota')
course.errors.has_key('quota')
course.errors[:quota]
course.errors
course
c
n
c
CoursesRepository.new.search_by_subject('memo2')
CoursesRepository.new.delete_all
CoursesRepository.new.save(course)
CoursesRepository.new.search_by_subject('memo2')
CoursesRepository.new.save(course)
CoursesRepository.new.search_by_subject('memo2')
CoursesRepository.new.all
course
n
c
CoursesRepository.new.find_by_code(9521)
CoursesRepository.new.find_by_code('9521')
CoursesRepository.find_by_code('9521')
course
n
c
CoursesRepository.new.save(course)
course
n
c
CoursesRepository.new.save(course)
CoursesRepository.new.search_by_subject('memo2')
n
CoursesRepository.new.search_by_subject('memo2')
CoursesRepository.new.search_by_subject(memo2)
CoursesRepository.search_by_subject(memo2)
course
n
c
request.body.read
request.body.to_json
request.body
request.body.name
CoursesRepository.new
CoursesRepository.new.all
n
CoursesRepository.new.all
n
c
n
c
CoursesRepository.new.all
CoursesRepository.new.search_by_subject('Analisis')
c
CoursesRepository.new.search_by_subject('Analisis')
CoursesRepository.new.delete_all
CoursesRepository.new.search_by_subject('Analisis')
<Sequel::Postgres::Dataset: "SELECT * FROM \"course\"">
CoursesRepository.new.all
CoursesRepository.new.delete_all
CoursesRepository.new.course
CoursesRepository.new.all
CoursesRepository.new.dataset
Sequel.course
c
n
c
c\
n
c
n
c
n
course
n
c
CourseFromJson.parse(request.body.read)
c
Course.new(args)
n
c
Course.new(args)
n
c
tmp
tmp[KEYS[0]] = input[KEYS[0].to_s]
tmp[KEYS[0]] = input[KEY[0].to_s]
n
c
input[:codigo]
input["codigo"]
input["nombre"]
input[KEYS[0]]
json_obj[KEYS[0]]
KEYS[0]
tmp
n
c
n
c
input
Course.new(input)
n
c
Course.new(input)
input
n
c
CourseFromJson.parse(request.body.read)
c
d
d=Course.new(input)
n
c
c=Course.new(input)
c=Course.new(*args)
d
d=*args
b
b=*args
*args
c=Course.new(*args)
args
n
c
cc
c
cc
c
